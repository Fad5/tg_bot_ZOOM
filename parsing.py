import csv
import datetime
from value_sort import days
from config import invalid_link_to_post


def formating_noted(txt:str):
    if txt in invalid_link_to_post:
        return '–ù–µ—Ç'
    else:
        formating_txt = txt.replace('\n', ' ')
        return formating_txt


def date_formating(txt:str)-> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –¥–æ—Ç—É –∏–∑ YY.MM.DD –≤ YY-MM-DD
    :param txt:
    :return:
    """
    if txt not in invalid_link_to_post:
        date_list = txt.replace('\n', ' ').replace(',', '.').split('.')
        date_datetime = date_list[2] + '-' + date_list[1] + '-' + date_list[0]
        return date_datetime
    else:
        return ''

def from_watch_in_hours(element:str):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (XX.XX-XX.XX) —Ç–∏–ø–∞ str, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ(–º–µ–Ω—è–µ–º . –Ω–∞ :, –º–µ–Ω—è–µ–º , –Ω–∞ .), 
    —Ä–∞–∑–¥–µ–ª—è–µ—Ç –º–µ—Ç–æ–¥–æ–º split –ø–æ –∑–Ω–∞–∫—É "-", (XX:XX,XX:XX), –ø–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –º–∏–Ω—É—Ç –æ—Ç –ø—Ä–µ–æ–≥–æ –∏ –≤—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞—á–Ω–µ–∏–µ, 
    –Ω–∞—Ö–æ–¥–º —Ä–∞–∑–Ω–∏—Ü—É –∏ –≤–∑–æ–≤—Ä–∞—â–∞–µ–º —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    if element == '':
        return 0
    else:
        formating_element = (element.replace(' ', '').replace('.', ':').replace(',', '.')).replace('‚Äî','-').replace('‚Äì','-').replace("‚àí",'-')
        formating_elements = formating_element.split('-')
        firts_time =  formating_elements[0].find(':')
        second_time =  formating_elements[1].find(':')
        start_time =  int(formating_elements[0][:firts_time]) * 60 + int(formating_elements[0][firts_time+1:])
        finish_time = int(formating_elements[1][:second_time]) * 60 + int(formating_elements[1][second_time+1:])
        summa_hours = finish_time - start_time
        resault = summa_hours / 60
        return resault

def get_info_work_day(user):
    """
    –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä—è –ø–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–∏—å—Å—è –ø–æ
    csv —Ñ–∞–π–ª—É –∏ –ø–æ–º–µ—â–∞–µ—Ç –≤ js —Ñ–∞–π–ª
    :param user:
    :return:
    """
    name_file = 'data_base'
    js = []

    with open(f'{name_file}.csv', newline='', encoding='utf-8') as File:
        reader = csv.reader(File)
        for row in reader:
            if user in row:
                js.append({
                    '#': row[0].replace('\n', ' '),
                    'Programm': row[1].replace('\n', ' '),
                    'Modul': row[2].replace('\n', ' '),
                    'Data': date_formating(row[3]),
                    'Trowme': row[4].replace(' ', '').replace('.', ':'),
                    'Watch': row[5].replace('\n', ' '),
                    'Item': row[6].replace('\n', ' '),
                    'Comment': row[8].replace('\n', ' '),
                    'Teacher': row[7].replace('\n', ' '),
                    'Note':formating_noted(row[9]),
                    'Audience': row[10].replace('\n', ' '),
                    'Webinar link': row[11].replace('\n', ' '),
                    'Link to post': row[12].replace('\n', ' '),
                    'Operator': row[13].replace('\n', ' '),
                    'Account': row[14].replace('\n', ' '),
                    'Hours': from_watch_in_hours(row[4])
                })
    return js


def read_js(work_day, argument, day_read=1):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Ñ–∞–π–ª—É csv –∏ –ø–æ–ª—É—á–µ—Ç –¥–∞—Ç—É, –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–¥–∞–Ω–æ–π –≤ argument,
    —Ç–æ –º—ã –ø–æ–ª—É—á–µ–º —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –∏ –ø–æ–º–µ—â–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é discription –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    :param work_day:
    :param argument:
    :param day_read:
    :return:
    """
    if work_day['Data'] not in invalid_link_to_post:
        date_json = work_day['Data']
        data_sort = datetime.datetime.strptime(date_json, '%Y-%m-%d').date()
        if data_sort == days(argument, day=day_read):
            description_for_show_work_day = (f"üéì –ü—Ä–æ–≥—Ä–∞–º–º–∞: {work_day['Programm']} \nüìó–ü—Ä–µ–¥–º–µ—Ç: {work_day['Item']}\nüë®‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {work_day['Teacher']}\nüóì–î–∞—Ç–∞: "
                           f"{work_day['Data']}\nüïê–í—Ä–µ–º—è: {work_day['Trowme']}\n‚ùó–ü—Ä–∏–º–∏—á–∞–Ω–∏–µ: {work_day['Note']}\nüìå–û–ø–µ—Ä–∞—Ç–æ—Ä: {work_day['Operator']}\nüîí–ê–∫–∞—É–Ω—Ç: {work_day['Account']}.")
            return description_for_show_work_day
    else:
        pass


def read_js_day(work_day:dict, date_base_day:list):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Ñ–∞–π–ª—É csv –∏ –ø–æ–ª—É—á–µ—Ç –¥–∞—Ç—É, –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–¥–∞–Ω–æ–π –≤ work_day –∏ –µ—Å—Ç—å –≤ date_base_day,
    —Ç–æ –º—ã –ø–æ–ª—É—á–µ–º —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –∏ –ø–æ–º–µ—â–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é discription –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    :param work_day:
    :param date_base_day:
    :return:
    """
    print(work_day['Data'])
    if work_day['Data'] not in invalid_link_to_post:
        date_json = work_day['Data']
        data_sort = datetime.datetime.strptime(date_json, '%Y-%m-%d').date()
        if data_sort in date_base_day:
            description = (f"üéì–ü—Ä–æ–≥—Ä–∞–º–º–∞: {work_day['Programm']} \nüìó–ü—Ä–µ–¥–º–µ—Ç: {work_day['Item']}\nüë®‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {work_day['Teacher']}\nüóì–î–∞—Ç–∞: "
                           f"{work_day['Data']}\nüïê–í—Ä–µ–º—è: {work_day['Trowme']} \n‚ùó–ü—Ä–∏–º–∏—á–∞–Ω–∏–µ: {work_day['Note']} \nüìå–û–ø–µ—Ä–∞—Ç–æ—Ä: {work_day['Operator']}\nüîí–ê–∫–∞—É–Ω—Ç: {work_day['Account']}.")
            return description
    else:
        pass


def read_js_hours(work_day:dict, date_base_day:list):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Ñ–∞–π–ª—É csv –∏ –ø–æ–ª—É—á–µ—Ç –¥–∞—Ç—É, –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–¥–∞–Ω–æ–π –≤ work_day –∏ –µ—Å—Ç—å –≤ date_base_day,
    —Ç–æ –º—ã –ø–æ–ª—É—á–µ–º —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –∏ –ø–æ–º–µ—â–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é discription –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    :param work_day:
    :param date_base_day:
    :return:
    """
    if work_day['Data'] == "":
        pass
    date_json = work_day['Data']
    data_sort = datetime.datetime.strptime(date_json, '%Y-%m-%d').date()
    if data_sort in date_base_day:
        if work_day['Webinar link'] != "":
            if work_day['Link to post'] not in invalid_link_to_post:
                hours = work_day['Hours']
                print_hours_day = f'üóì {work_day["Data"]}    üï∞ {str(work_day["Hours"])}\n'
                return hours, print_hours_day
            else:
                pass


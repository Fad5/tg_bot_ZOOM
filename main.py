import asyncio

from aiogram import Bot, Dispatcher, types, executor, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import datetime
import os

from keybords_for_bot import get_kb_list_db, get_kb_start
from notification import users_is_notifications, hours_correct
from sort_work_day import create_cvs_file
from config import answer_block, TEXT_HOLIDAY, list_info
from accounts import TOKEN, ACCOUNTS_ZOOM, ACCOUNTS_WEBINAR
from parsing import get_info_work_day, read_js, read_js_day, read_js_hours
from value_sort import get_password_mail, list_work_day, check_hours_month

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–¥
from def_for_work_date_base import (is_user, show_db, del_user_db, add_user_db,
                                    update_user_db, get_user_name, show_table)

storge = MemoryStorage()

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storge)

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–±–∏—Ä–∞–µ—Ç —Å —Å–∞–π—Ç–∞ —Ñ–∞–π–ª —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ csv —Ñ–∞–π–ª
create_cvs_file()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
kb.add('–ê–∫–∫–∞—É–Ω—Ç—ã zoom', '–û–ø–µ—Ä–∞—Ç–æ—Ä—ã Webinar.ru')


class StatesdataBase(StatesGroup):
    dataBase = State()


class StatesReplaceSelf(StatesGroup):
    name = State()


@dp.message_handler(commands='data')
async def cmd_create(message: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ LAST, NEXT –∏ CURRENT –Ω–µ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    list_week = list_work_day()
    result = 'LAST WEEK: ' + str(list_week[0]) + '\n' + 'CURRENT WEEK: ' + str(
        list_week[1]) + '\n' + 'NEXT WEEK: ' + str(list_week[2])
    await bot.send_message(message.from_user.id, text=result)


# /db_show - –≤—ã–∑—ã–≤–∞–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(commands='db_show')
async def name_database(message: types.Message) -> None:
    await message.answer("–ù–∞–ø–∏—à–∏ –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!",
                         reply_markup=get_kb_list_db())

    await StatesdataBase.dataBase.set()


@dp.message_handler(filters.Text(contains=['–æ—Ç–º–µ–Ω–∞', '–û—Ç–º–µ–Ω–∞'], ignore_case=True), state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π 
    """
    await state.finish()
    await message.reply('–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=get_kb_start())


@dp.message_handler(filters.Text(contains=['–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ DataBase',
                                           '–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ database'], ignore_case=True), state='*')
async def cmd_show_table(message: types.Message):
    result = str(show_table())
    await bot.send_message(message.from_user.id, text=result)


@dp.message_handler(state=StatesdataBase.dataBase)
async def load_description(message: types.Message, state: FSMContext) -> None:
    """

    """
    async with state.proxy() as database:
        database['dataBase'] = message.text
    date_base = show_db(table=database['dataBase'].lower())
    await bot.send_message(message.from_user.id, text=str(date_base), parse_mode='HTML')
    await state.finish()


@dp.message_handler(commands='list_db')
async def list_db(massage: types.Message) -> None:
    result = str(show_table())
    await bot.send_message(massage.from_user.id, text=result)


@dp.message_handler(filters.Text(contains='–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'))
async def update_user(massage: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —á–∏—Ç–∞–µ—Ç report_parsing.txt –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–µ,
    –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ data_base.csv
    """
    date_update_file_unix = os.path.getmtime('data_base.csv')
    date_update_file = str(datetime.datetime.fromtimestamp(date_update_file_unix))
    info_data_update = date_update_file[:-7]
    await bot.send_message(massage.from_user.id, text=info_data_update)


@dp.message_handler(commands='last_upd')
async def upd_user(message: types.Message) -> None:
    date_update_file_unix = os.path.getmtime('data_base.csv')
    date_update_file = str(datetime.datetime.fromtimestamp(date_update_file_unix))
    info_data_update = date_update_file[:-7]
    await bot.send_message(message.from_user.id, text=info_data_update)


@dp.message_handler(commands='upd')
async def upd_user(message: types.Message) -> None:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–∫ –≤ Excel!",
                         reply_markup=get_kb_list_db())
    await StatesReplaceSelf.name.set()


@dp.message_handler(state=StatesReplaceSelf.name)
async def update_user_states(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as name:
        name['dataBase'] = message.text
        update_user_db('user_name', name['dataBase'].replace('==', ' '), 429845350, 'user')
        await bot.send_message(message.from_user.id, text='–û–∫', reply_markup=get_kb_start())
        await state.finish()


@dp.message_handler(commands='update_user_db')
async def update_user_tg(massage: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –Ω–∞ 4 —á–∞—Å—Ç–∏, 1 - –∫–æ–º–∞–Ω–¥–∞, 2 - id_tg –∏–ª–∏ user_name, 3 - –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, 4 - id_tg
    –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ
    :param massage:
    :return: None
    """
    is_id = is_user(massage.from_user.id, 'admin')
    if is_id:
        message = massage.text
        message_split = message.split()
        if len(message_split) == 2:
            if message_split[1].lower() == 'info':
                await bot.send_message(massage.from_user.id,
                                       text='–ü—Ä–∏–º–µ—Ä: /add_user_db id_tg user_name \n–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: id –∏–ª–∏ name_user,'
                                            '\n –í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç(–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ): new name\n'
                                            '–¢—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç: id_tg –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: datebase\n'
                                            '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /list_db')
        elif len(message_split) == 5:
            value = message_split[1]
            name_user = message_split[2].replace('==', ' ')
            id_tg = int(message_split[3])
            database = message_split[4]
            update_user_db(value, name_user, id_tg, database)
            await bot.send_message(massage.from_user.id, text='–û–∫')
        else:
            await bot.send_message(massage.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ id')
    else:
        await bot.send_message(massage.from_user.id, text='üîí–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@dp.message_handler(commands='check_user')
async def check_user(massage: types.Message) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ id
    :param massage:
    :return:
    """
    result = is_user(id_tg=massage.from_user.id, table='admin')
    if result:
        user_id = massage.text.split()
        if len(user_id) == 2:
            if user_id[1].lower() == 'info':
                await bot.send_message(massage.from_user.id,
                                       text='–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: id_TG \n'
                                            '–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç: database\n'
                                            '–ü—Ä–∏–º–µ—Ä: /check_user 123456 user')
        elif len(user_id) == 3:
            id_int = int(user_id[1])
            database = user_id[2]
            result = is_user(id_tg=id_int, table=database)
            if result:
                await bot.send_message(massage.from_user.id, text='–û–∫')
            else:
                await bot.send_message(massage.from_user.id, text='‚ùó–ù–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')

        else:
            await bot.send_message(massage.from_user.id, text='‚ùó–í–≤–µ–¥–∏—Ç–µ id –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')

    else:
        await bot.send_message(massage.from_user.id, text='üîí–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@dp.message_handler(commands='db_show_')
async def db_show(massage: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    :param massage:
    :return:
    """
    is_id = is_user(massage.from_user.id, 'admin')
    if is_id:
        message = massage.text
        message_split = message.split()
        if len(message_split) == 2:
            if message_split[1].lower() == 'info':
                await bot.send_message(massage.from_user.id, text='–ü—Ä–∏–º–µ—Ä:/db_show database')
            else:
                date_base = show_db(table=message_split[1].lower())
                await bot.send_message(massage.from_user.id, text=str(date_base), parse_mode='HTML')
    else:
        await bot.send_message(massage.from_user.id, text='üîí–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@dp.message_handler(commands='del_user_db')
async def del_user(massage: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    :param massage:
    :return:
    """
    message_split = massage.text.split()
    if len(message_split) == 2:
        if message_split[1].lower() == 'info':
            await bot.send_message(massage.from_user.id,
                                   text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, id, –∏ database –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–¥–∫–ª—é—á–∞—Ç—Å—è \n –ü—Ä–∏–º–µ—Ä:'
                                        '/del_user_db 123456 user')
    elif len(message_split) == 3:
        database = message_split[2]
        id_tg = int(message_split[1])
        result = is_user(id_tg, database)
        if result:
            del_user_db(id_tg, database)
            await bot.send_message(massage.from_user.id, text='‚ùó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!')
        else:
            await bot.send_message(massage.from_user.id, text='‚ùó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    else:
        await bot.send_message(massage.from_user.id, text='‚ùó–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, id –∏ database')


@dp.message_handler(commands='admin_commands')
async def check_user_tg(massage: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    result = is_user(id_tg=massage.from_user.id, table='admin')
    if result:
        await bot.send_message(massage.from_user.id, text='/add_user_db - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n'
                                                          '/del_user_db - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n'
                                                          '/db_show - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n'
                                                          '/check_user - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n'
                                                          '/list_db - —Å–ø–∏—Å–æ–∫ database')
    else:
        await bot.send_message(massage.from_user.id, text='üîí–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@dp.message_handler(commands='add_user_db')
async def add_user(massage: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, fun –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ split [1]-id, [2] - name_user
    –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ info, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø—Ä–∏–º–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    :param massage:
    :return: None
    """
    is_id = is_user(massage.from_user.id)
    if is_id:
        message = massage.text
        message_split = message.split()
        if len(message_split) == 2:
            if message_split[1].lower() == 'info':
                await bot.send_message(massage.from_user.id,
                                       text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, id, –∏ database –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–¥–∫–ª—é—á–∞—Ç—Å—è \n –ü—Ä–∏–º–µ—Ä: '
                                            '/add_user_db 123456 –ò–º—è==–§–∞–º–∏–ª–∏—è –≤ exel user')
        elif len(message_split) == 4:
            id_tg = int(message_split[1])
            name_user = message_split[2].replace('==', ' ')
            database = message_split[3]
            result = add_user_db(id_tg, name_user, database)
            if result:
                await bot.send_message(massage.from_user.id, text='–û–∫')
            else:
                await bot.send_message(massage.from_user.id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c —Ç–∞–∫–∏–º id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ')
        else:
            await bot.send_message(massage.from_user.id, text='‚ùó–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É ,id –∏ database')
    else:
        await bot.send_message(massage.from_user.id, text='üîí–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


# –ú–µ–Ω—é —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ zoom
def get_keyboard(name_callback, ACCOUNTS):
    callback_data_zoom = []
    for account in ACCOUNTS:
        element = name_callback + account
        callback_data_zoom.append(element)
    keyboard = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton(text='', callback_data="MainMenu")
    button_list = [types.InlineKeyboardButton(text=x.replace(name_callback, ''), callback_data=x) for x in
                   callback_data_zoom]
    keyboard.add(*button_list, back_button)
    return keyboard


# /start - —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
@dp.message_handler(commands='start')
async def start_handler(massage: types.Message):
    result = get_user_name(massage.from_user.id, 'user')
    if result is not None:
        await massage.answer(f'üëã –ü—Ä–∏–≤–µ—Ç,{massage.from_user.first_name}!', reply_markup=get_kb_start())
    else:
        await bot.send_message(massage.from_user.id, text=answer_block)


# /next_week - —Ñ—É–Ω–∫—Ü–∏—è —Å–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏ –µ—Å—Ç—å –ª–∏ –≤—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è 
# –ø–æ data_base.csv —Ñ–∞–π–ª—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –≤—Å–µ zoom
@dp.message_handler(commands='next_week')
async def get_next_week_work(massage: types.Message):
    result = get_user_name(massage.from_user.id, 'user')
    if result is not None:
        for i in (get_info_work_day(result)):
            info = read_js_day(i, list_work_day()[2])
            if info is not None:
                list_info.append(info)
                await massage.answer(info)
        if not list_info:
            await bot.send_message(massage.from_user.id, text=TEXT_HOLIDAY)

        list_info.clear()
    else:
        await bot.send_message(massage.from_user.id, text=answer_block)


# /current_week - —Ñ—É–Ω–∫—Ü–∏—è —Å–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏—Ç –µ—Å—Ç—å –ª–∏ –≤—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è 
# –ø–æ data_base.csv —Ñ–∞–π–ª—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –≤—Å–µ zoom
@dp.message_handler(commands='current_week')
async def get_current_week_work(massage: types.Message):
    result = get_user_name(massage.from_user.id, 'user')
    if result is not None:
        for i in (get_info_work_day(result)):
            info = read_js_day(i, list_work_day()[1])
            if info is not None:
                list_info.append(info)
                await massage.answer(info)
        if not list_info:
            await bot.send_message(massage.from_user.id, text=TEXT_HOLIDAY)
        list_info.clear()
    else:
        await bot.send_message(massage.from_user.id, text=answer_block)


# /last_week - —Ñ—É–Ω–∫—Ü–∏—è —Å–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏—Ç –µ—Å—Ç—å –ª–∏ –≤—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è 
# –ø–æ data_base.csv —Ñ–∞–π–ª—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –≤—Å–µ zoom
@dp.message_handler(commands='last_week')
async def get_last_week_work(massage: types.Message):
    result = get_user_name(massage.from_user.id, 'user')
    if result is not None:
        for i in (get_info_work_day(result)):
            info = read_js_day(i, list_work_day()[0])
            if info is not None:
                list_info.append(info)
                await massage.answer(info)
        if not list_info:
            await bot.send_message(massage.from_user.id, text=TEXT_HOLIDAY)
        list_info.clear()
    else:
        await bot.send_message(massage.from_user.id, text=answer_block)


# /today - —Ñ—É–Ω–∫—Ü–∏—è —Å–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏—Ç –µ—Å—Ç—å –ª–∏ –≤—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è
# –ø–æ data_base.csv —Ñ–∞–π–ª—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –≤—Å–µ zoom –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
@dp.message_handler(commands='today')
async def get_today_work_day(massage: types.Message):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    :param massage:
    :return:
    """
    result = get_user_name(massage.from_user.id, 'user')
    if result is not None:
        for i in (get_info_work_day(result)):
            info = read_js(work_day=i, argument='')
            if info is not None:
                list_info.append(info)
                await massage.answer(info)
        if not list_info:
            await bot.send_message(massage.from_user.id, text=TEXT_HOLIDAY)
        list_info.clear()
    else:
        await bot.send_message(massage.from_user.id, text=answer_block)


# /tomorrow - —Ñ—É–Ω–∫—Ü–∏—è —Å–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏—Ç –µ—Å—Ç—å –ª–∏ –≤—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è 
# –ø–æ data_base.csv —Ñ–∞–π–ª—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –≤—Å–µ zoom –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
@dp.message_handler(commands='tomorrow')
async def get_tomorrow_work_day(massage: types.Message) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    :param massage:
    :return:
    """
    result = get_user_name(massage.from_user.id, 'user')
    if result is not None:
        for i in (get_info_work_day(result)):
            info = read_js(work_day=i, argument='next')
            if info is not None:
                list_info.append(info)
                await massage.answer(info)
        if not list_info:
            await bot.send_message(massage.from_user.id, text=TEXT_HOLIDAY)
        list_info.clear()
    else:
        await bot.send_message(massage.from_user.id, text=answer_block)


# /yesterday - —Ñ—É–Ω–∫—Ü–∏—è —Å–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏—Ç –µ—Å—Ç—å –ª–∏ –≤—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è 
# –ø–æ data_base.csv —Ñ–∞–π–ª—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –≤—Å–µ zoom –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
@dp.message_handler(commands='yesterday')
async def get_yesterday_work_day(massage: types.Message) -> None:
    """ 
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π –Ω–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    :param massage:
    :return:
    """
    result = get_user_name(massage.from_user.id, 'user')
    if result is not None:
        for i in (get_info_work_day(result)):
            info = read_js(work_day=i, argument='last')
            if info is not None:
                list_info.append(info)
                await massage.answer(info)
        if not list_info:
            await bot.send_message(massage.from_user.id, text=TEXT_HOLIDAY)
        list_info.clear()
    else:
        await bot.send_message(massage.from_user.id, text=answer_block)


# /get_summa_hours_current_month - —Ñ—É–Ω–∫—Ü–∏—è —Å–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏—Ç –µ—Å—Ç—å –ª–∏ –≤—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è 
# –ø–æ data_base.csv —Ñ–∞–π–ª—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É —á–∞—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
@dp.message_handler(commands=f'get_summa_hours_current_month')
async def get_hours_summa_current(massage: types.Message, summa: float = 0) -> None:
    result = get_user_name(massage.from_user.id, 'user')
    if result is not None:
        date_list = check_hours_month('current_list_hours')
        for i in (get_info_work_day(result)):
            hours = read_js_hours(i, date_list)
            print(hours)
            if hours is None:
                pass
            else:
                summa = summa + float(hours[0])
        await bot.send_message(massage.from_user.id, text='üï∞ ' + str("%.2f" % summa))
    else:
        await bot.send_message(massage.from_user.id, text=answer_block)


# /get_list_hours_current_month - —Ñ—É–Ω–∫—Ü–∏—è —Å–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏—Ç –µ—Å—Ç—å –ª–∏ –≤—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è 
# –ø–æ data_base.csv —Ñ–∞–π–ª—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
@dp.message_handler(commands=f'get_list_hours_current_month')
async def get_hours_list_current(massage: types.Message, print_hours: str = '') -> None:
    result = get_user_name(massage.from_user.id, 'user')
    if result is not None:
        date_list = check_hours_month('current_list_hours')
        for i in (get_info_work_day(result)):
            hours = read_js_hours(i, date_list)
            if hours is None:
                pass
            else:
                print_hours = print_hours + hours[1]
        await bot.send_message(massage.from_user.id, text=print_hours)
    else:
        await bot.send_message(massage.from_user.id, text=answer_block)


# /get_summa_hours_last_month - —Ñ—É–Ω–∫—Ü–∏—è —Å–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏—Ç –µ—Å—Ç—å –ª–∏ –≤—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è 
# –ø–æ data_base.csv —Ñ–∞–π–ª—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É —á–∞—Å–æ–≤ –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ
@dp.message_handler(commands=f'get_summa_hours_last_month')
async def get_hours_summa_last(massage: types.Message, summa: float = 0, print_hours: str = '') -> None:
    result = get_user_name(massage.from_user.id, 'user')
    if result is not None:
        date_list = check_hours_month('last_list_hours')
        for i in (get_info_work_day(result)):
            hours = read_js_hours(i, date_list)
            if hours is None:
                pass
            else:
                summa = summa + float(hours[0])
        await bot.send_message(massage.from_user.id, text='üï∞ ' + str("%.2f" % summa))
    else:
        await bot.send_message(massage.from_user.id, text=answer_block)


# /get_list_hours_last_month - —Ñ—É–Ω–∫—Ü–∏—è —Å–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏—Ç –µ—Å—Ç—å –ª–∏ –≤—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è 
# –ø–æ data_base.csv —Ñ–∞–π–ª—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤ –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ
@dp.message_handler(commands=f'get_list_hours_last_month')
async def get_hours_list_last(massage: types.Message, print_hours: str = '') -> None:
    result = get_user_name(massage.from_user.id, 'user')
    if result is not None:
        date_list = check_hours_month('last_list_hours')
        for i in (get_info_work_day(result)):
            hours = read_js_hours(i, date_list)
            if hours is None:
                pass
            else:
                print_hours = print_hours + hours[1]
        await bot.send_message(massage.from_user.id, text=print_hours)
    else:
        await bot.send_message(massage.from_user.id, text=answer_block)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Ä–µ—Ç—Å—è –∏–∑ ACCOUNTS_ZOOM –∏ ACCOUNTS_WEBINAR,
# –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤
@dp.message_handler()
async def get_info_accounts(massage: types.Message):
    result = get_user_name(massage.from_user.id, 'user')
    if result is not None:
        if massage.text.lower() == '–∞–∫–∫–∞—É–Ω—Ç—ã zoom':
            await bot.send_message(massage.from_user.id, '<b>–ê–∫–∫–∞—É–Ω—Ç—ã ZOOM</b>', parse_mode='HTML',
                                   reply_markup=get_keyboard('ZOOM', ACCOUNTS_ZOOM))
        elif massage.text.lower() == '–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã webinar.ru':
            await bot.send_message(massage.from_user.id, '<b>–û–ø–µ—Ä–∞—Ç–æ—Ä—ã Webinar.ru</b>', parse_mode='HTML',
                                   reply_markup=get_keyboard('webinar', ACCOUNTS_WEBINAR))
    else:
        await bot.send_message(massage.from_user.id, text=answer_block)


# –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤–æ–∑—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
@dp.callback_query_handler(text_contains='ZOOM')
async def show_password_mail_zoom(callback_query: types.CallbackQuery):
    button_name = callback_query['data'].replace('ZOOM', '')
    date = get_password_mail(button_name, ACCOUNTS_ZOOM)
    await bot.send_message(callback_query.from_user.id, parse_mode='html', text=date)
    await callback_query.answer()


# –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤–æ–∑—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
@dp.callback_query_handler(text_contains='webinar')
async def show_password_mail_webinar(callback_query: types.CallbackQuery):
    button_name = callback_query['data'].replace('webinar', '')
    date = get_password_mail(button_name, ACCOUNTS_WEBINAR)
    await bot.send_message(callback_query.from_user.id, parse_mode='html', text=date)
    await callback_query.answer()


# –≠—Ö–æ —Ñ—É–Ω–∫—Ü–∏—è
@dp.message_handler()
async def echo(massage: types.Message):
    await bot.send_message(massage.from_user.id, massage.text)


chat_ids = {'429845350'}


async def notification(sleep_for):
    while True:
        await asyncio.sleep(sleep_for)
        for i in users_is_notifications:
            user_name = i[1]
            user_id = i[0]
            data = get_info_work_day(user_name)
            is_zoom = hours_correct(data)
            if is_zoom:
                await bot.send_message(user_id, f'{user_name} –∑–∞–ø—É—Å—Ç–∏ zoom —á–µ—Ä–µ–∑ —á–∞—Å', disable_notification=True)


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(notification(60))
    executor.start_polling(dp, skip_updates=True)

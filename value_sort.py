from datetime import date, datetime, timedelta
from typing import List, Dict


def create_file_report(data) -> None:
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª report_date.txt –æ—Ç—á–µ—Ç –æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è exel —Ñ–∞–π–ª–∞

    return: None
    """
    with open('report_date.txt', 'a', encoding='utf-8') as f:
        f.write(data)


def start_weekday() -> date:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞

    return: start_week - –¥–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    """
    current_day = date.today()
    weeks = current_day.weekday()
    start_week = current_day - timedelta(days=weeks)
    return start_week


def week(argument: str) -> tuple[date, date]:
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç argument,
    –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π, –ø—Ä–æ—à–ª–æ–π –∏ –±—É–¥—É—â–µ–π. –§—É–Ω–∫–π–∏—è –ø–æ–ª—É—á–∏—Ç –Ω–∞—á–∞–ª–æ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏
    –∏ —É–∂–µ –ª–∏–±–æ –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç 7 –¥–Ω–µ–π –∏–ª–∏ —É–±–∞–≤–ª—è–µ—Ç –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–æ –ø—Ä–æ—à–ª–æ–π –∏–ª–∏ –±—É–¥—É—â–µ–π.

    - argument - –∫–ª—é—á —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è(next, last, current)

    return: start_week, finish_week - (datetime.date(year, month, day), datetime.date(year, month, day))
    """
    data_kay = {'next': [13, 7], 'last': [1, 7], 'current': [0, 6]}
    current_day = date.today()
    weeks = current_day.weekday()
    start_week = current_day - timedelta(days=weeks)
    finish_week = start_week + timedelta(days=data_kay[argument][0])
    start_week = start_weekday() + timedelta(days=data_kay[argument][1])
    return start_week, finish_week


def days(argument: str, day: int = 1, current_day: date = date.today()) -> date:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ, –ø—Ä–æ—à–ª–æ–≥–æ –∏ –±—É–¥—É—é—â–µ–≥–æ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ
    datetime.date –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç argument

    - argument - (next, last,' ') - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ

    return: datetime.date 
    """
    create_file_report(f'{current_day} | {datetime.now()} \n')
    if argument == 'next':
        next_day = date.today() + timedelta(days=day)
        return next_day
    elif argument == 'last':
        last_day = date.today() - timedelta(days=day)
        return last_day
    else:
        return date.today()


def days_for_week(argument: str, day: int = 1, current_day: date = date.today()) -> date:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ, –ø—Ä–æ—à–ª–æ–≥–æ –∏ –±—É–¥—É—é—â–µ–≥–æ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime,
    –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç argument

    return: –¥–µ–Ω—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime ()
    """
    if argument == 'next':
        next_day = current_day + timedelta(days=day)
        return next_day
    elif argument == 'last':
        last_day = current_day - timedelta(days=day)
        return last_day
    else:
        return current_day


def get_password_mail(zoom_account: str, ACCOUNTS: Dict) -> str:
    """
    –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ 

    - zoom_account - name –≤ —Ñ–∞–π–ª–µ accounts_example.py
    - ACCOUNTS -  —Å–ª–æ–≤–∞—Ä–∏(ACCOUNTS_WEBINAR, ACCOUNTS_ZOOM) –≤ —Ñ–∞–π–ª–µ accounts_example.py

    return result: –î–∞–Ω–Ω—ã–µ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ 
    """
    if zoom_account in ACCOUNTS:
        data_account = ACCOUNTS[zoom_account]
        result = f'üì¨ –ü–æ—á—Ç–∞: <code>{data_account["mail"]}</code> \nüîë–ü–∞—Ä–æ–ª—å: <code>{data_account["password"]}</code>'
        return result
    else:
        result = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        return result


def list_work_day() -> List:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –≤—Ö–æ–¥–∏—Ç—å 3 —Å–ø–∏c–∫–∞ —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑
    –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ —Ç–µ–∫—É—â–µ–π, –±—É–¥—É—â–µ–π –∏ –ø—Ä–æ—à–ª–æ–π

    return: —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ç–µ–∫—É—â–µ–π, –±—É–¥—É—â–µ–π –∏ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏
      [[last_week_days],[current_week_days],[next_week_days]]
    """

    full_list_day = []
    arguments = ['last', 'current', 'next']
    for argument in arguments:
        data = week(argument)
        start_week = data[0]
        list_day = []
        for i in range(0, 7):
            number_day = days_for_week('next', current_day=start_week, day=i)
            list_day.append(number_day)
        full_list_day.append(list_day)
    return full_list_day


def zero_error(number_of_the_month: int) -> int | None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞

    - number_of_the_month - –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ 
    """
    if number_of_the_month == 0:
        return 12
    if 13 > number_of_the_month >= 1:
        return number_of_the_month
    else:
        return None


def create_list_date_hours(current_day: date, starting_point: date):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è —Ü–∏–∫–ª–æ–º –∏ –æ—Ç current_day(—Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è) –æ—Ç–Ω–∏–º–∞–µ—Ç—Å—è 1 –¥–µ–Ω—å,
    –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ current_day == starting_point 

    return list_date: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–π —Å 10 –ø–æ 10
    """
    list_date = []
    if current_day > starting_point:
        while current_day > starting_point:
            current_day = current_day - timedelta(days=1)
            list_date.append(current_day)
        return list_date
    if current_day < starting_point:
        while current_day > starting_point:
            current_day = current_day - timedelta(days=1)
            list_date.append(current_day)
        return list_date


def check_hours():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–π —Å 10 –ø–æ 10
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    date_current = date.today()
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≤ str date_current
    date_current_str = str(date_current)
    # –ü–æ–ª—É—á–∞–µ–º year-month-10
    check_10 = date_current_str[:8] + '10'
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ check_10 –≤ datetime
    check_10_check = datetime.strptime(check_10, '%Y-%m-%d').date()
    if date_current > check_10_check:
        list_date_hours = (create_list_date_hours(current_day=date_current, starting_point=check_10_check))
        return list_date_hours
    if date_current < check_10_check:
        i = int(check_10_check.month) - 1
        i = zero_error(i)
        check_10_check_1 = check_10[:5] + str(i) + check_10[7:]
        check_10_check11 = datetime.strptime(check_10_check_1, '%Y-%m-%d').date()
        list_date_hours = (create_list_date_hours(current_day=date_current, starting_point=check_10_check11))
        return list_date_hours


check_hours()


def check_hours_month(argument: str):
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime.date

    - argument - 2 –∫–ª—é—á–∞: last_list_hours - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞,
        current_list_hours - —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    """
    if argument == 'last_list_hours':
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        date_current = date.today()
        # –ó–∞–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å
        day_in = date.today().day
        # –í—ã—á–∏—Ç–∞–µ–º 1 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ 
        day_in_day = day_in - 1
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–µ—Ü –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
        finish_date = date_current - timedelta(days=day_in_day + 1)
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—Ü
        finish_month = finish_date.month
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥
        finish_year = finish_date.year
        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–æ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
        get_last_month = f'{str(finish_year)}-{str(finish_month)}-01'
        # –ò–∑ str –≤ datetime.date –ø–µ—Ä–µ–≤–æ–¥–∏–º
        finish_datetime = datetime.strptime(get_last_month, '%Y-%m-%d').date()
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        start_current_month = date_current - timedelta(days=day_in_day)
        # –ü–æ–ª—É—á–∞–µ–º –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ –¥–Ω–∏ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [datetime.date(year, month, day),
        # datetime.date(year, month, day)]
        list_day_in_month_last = create_list_date_hours(current_day=start_current_month, starting_point=finish_datetime)
        return list_day_in_month_last
    if argument == 'current_list_hours':
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        date_current = date.today()
        # –ó–∞–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å
        day_in = date.today().day
        # –í—ã—á–∏—Ç–∞–µ–º 1 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        day_in = day_in - 1
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        start_current_month = date_current - timedelta(days=day_in)
        # –ü–æ–ª—É—á–∞–µ–º –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [datetime.date(year, month, day),
        # datetime.date(year, month, day)]
        list_day_in_month_current = (
            create_list_date_hours(current_day=date_current, starting_point=start_current_month))
        return list_day_in_month_current
